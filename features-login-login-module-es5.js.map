{"version":3,"sources":["webpack:///src/app/features/login/login-routing.module.ts","webpack:///src/app/features/login/login/login.component.ts","webpack:///src/app/features/login/login/login.component.html","webpack:///src/app/features/login/register/register.component.ts","webpack:///src/app/features/login/register/register.component.html","webpack:///src/app/features/login/login.module.ts"],"names":["routes","path","component","LoginRoutingModule","forChild","imports","exports","LoginComponent","formBuilder","route","router","authenticationService","authService","destroy$","submitted","currentUser","navigate","loginForm","group","email","required","password","key","returnUrl","snapshot","queryParams","next","complete","invalid","authLogin","f","value","pipe","subscribe","navigateByUrl","name","signIn","PROVIDER_ID","then","userGoogle","authLoginGoogle","idToken","onSubmit","controls","register","socialLogin","templateUrl","styleUrls","RegisterComponent","snackBar","overlayContainer","authManagementService","loading","getContainerElement","classList","add","registerForm","firstName","lastName","roles","minLength","open","duration","selector","LoginModule","faIconLibrary","addIcons","declarations"],"mappings":"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","file":"features-login-login-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { LoginComponent } from './login/login.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LoginComponent\r\n  },\r\n  {\r\n    path: 'register',\r\n    component: RegisterComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class LoginRoutingModule { }\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { take, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\nimport { AuthManagementService } from '../../../core/auth/auth-management.service';\r\nimport { SocialAuthService, MicrosoftLoginProvider, GoogleLoginProvider } from 'angularx-social-login';\r\n\r\n\r\n@Component({\r\n  templateUrl: 'login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Use to destroy and prevent memory leaks\r\n   */\r\n  private destroy$: Subject<void> = new Subject<void>();\r\n\r\n  loginForm: FormGroup;\r\n  submitted = false;\r\n  returnUrl: string;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private authenticationService: AuthManagementService,\r\n    private authService: SocialAuthService\r\n  ) {\r\n    // redirect to starship if already logged in\r\n    if (this.authenticationService.currentUser) {\r\n      this.router.navigate(['/']);\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loginForm = this.formBuilder.group({\r\n      email: ['', Validators.required],\r\n      password: ['', Validators.required]\r\n    });\r\n\r\n    // get return url from route parameters or default to '/'\r\n    const key = 'returnUrl';\r\n    this.returnUrl = this.route.snapshot.queryParams[key] || '/';\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  // convenience getter for easy access to form fields\r\n  get f() {\r\n    return this.loginForm.controls;\r\n  }\r\n\r\n  /**\r\n   * Submit login\r\n   */\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // stop here if form is invalid\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.authenticationService\r\n      .authLogin(this.f.email.value, this.f.password.value)\r\n      .pipe(take(1), takeUntil(this.destroy$))\r\n      .subscribe(() => {\r\n        this.router.navigateByUrl('/');\r\n      });\r\n  }\r\n\r\n  socialLogin(name: string) {\r\n    switch (name) {\r\n      case 'google':\r\n        this.authService.signIn(GoogleLoginProvider.PROVIDER_ID).then(userGoogle => {\r\n          this.authenticationService\r\n            .authLoginGoogle(userGoogle.idToken)\r\n            .pipe(take(1), takeUntil(this.destroy$))\r\n            .subscribe(() => {\r\n              this.router.navigateByUrl('/');\r\n            });\r\n        });\r\n\r\n        break;\r\n      case 'microsoft':\r\n        this.authService.signIn(MicrosoftLoginProvider.PROVIDER_ID);\r\n        break;\r\n      default:\r\n        this.onSubmit();\r\n        break;\r\n    }\r\n  }\r\n\r\n\r\n  register() {\r\n    this.router.navigateByUrl('/login/register');\r\n  }\r\n}\r\n","<div class=\"login-theme d-flex flex-row justify-content-center align-items-center\">\r\n    <mat-card>\r\n\r\n        <mat-card-title-group>\r\n            <mat-card-title>Ingresa a aulaPlaneta</mat-card-title>\r\n        </mat-card-title-group>\r\n\r\n        <mat-card-content>\r\n            <form role=\"form\" class=\"d-flex flex-column\" [formGroup]=\"loginForm\">\r\n                <fieldset class=\"d-flex flex-column\">\r\n                    <mat-form-field class=\"w-100\">\r\n                        <mat-label>Usuario</mat-label>\r\n                        <input matInput name=\"email\" type=\"text\" formControlName=\"email\">\r\n                        <mat-error>Campo requerido</mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field class=\"w-100\">\r\n                        <mat-label>Contraseña</mat-label>\r\n                        <input matInput name=\"password\" type=\"password\" formControlName=\"password\">\r\n                        <mat-error>Campo requerido</mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <button role=\"button\" (click)=\"onSubmit()\" type=\"submit\" mat-raised-button color=\"primary\" class=\"w-100\" [disabled]=\"loginForm.invalid\">Entrar</button>\r\n                </fieldset>\r\n            \r\n                <a class=\"text-center\" href=\"#\">¿Has olvidado tu contraseña?</a>\r\n\r\n                <button type=\"button\" role=\"button\" mat-raised-button color=\"accent\" class=\"w-100\" (click)=\"register()\">Crear cuenta</button>\r\n\r\n                <button type=\"button\" role=\"button\" mat-raised-button (click)=\"socialLogin('microsoft')\">\r\n                    <fa-icon [icon]=\"['fab','microsoft']\"></fa-icon>\r\n                    Entrar con Office365\r\n                </button>\r\n\r\n                <button role=\"button\" mat-raised-button (click)=\"socialLogin('google')\">\r\n                    <fa-icon [icon]=\"['fab','google']\"></fa-icon>\r\n                    Entrar con Google\r\n                </button>\r\n            </form>\r\n        </mat-card-content>\r\n    </mat-card>\r\n\r\n    <button role=\"button\" aria-label=\"Alumno\" mat-mini-fab color=\"primary\">\r\n        <mat-icon>school</mat-icon>\r\n    </button>\r\n</div>\r\n\r\n\r\n","import { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { take, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\nimport { AuthManagementService } from '../../../core/auth/auth-management.service';\r\nimport { OverlayContainer } from '@angular/cdk/overlay';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: 'register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Use to destroy and prevent memory leaks\r\n   */\r\n  private destroy$: Subject<void> = new Subject<void>();\r\n\r\n  registerForm: FormGroup;\r\n  loading = false;\r\n  submitted = false;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private snackBar: MatSnackBar,\r\n    private overlayContainer: OverlayContainer,\r\n    public authManagementService: AuthManagementService\r\n  ) {\r\n    this.overlayContainer.getContainerElement().classList.add('login-theme');\r\n\r\n    // redirect to starship if already logged in\r\n    if (this.authManagementService.currentUser) {\r\n      this.router.navigate(['/']);\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.registerForm = this.formBuilder.group({\r\n      firstName: ['', Validators.required],\r\n      lastName: ['', Validators.required],\r\n      email: ['', Validators.required, Validators.email],\r\n      roles: ['', Validators.required],\r\n      password: ['', [Validators.required, Validators.minLength(4)]]\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  /**\r\n   * Submit registration\r\n   */\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // stop here if form is invalid\r\n    if (this.registerForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.loading = true;\r\n    this.authManagementService\r\n      .register(this.registerForm.value)\r\n      .pipe(take(1), takeUntil(this.destroy$))\r\n      .subscribe(() => {\r\n        this.snackBar.open('Registro completado', 'OK', {\r\n          duration: 2000\r\n        });\r\n        this.router.navigate(['/']);\r\n      });\r\n  }\r\n}\r\n","<div class=\"login-theme d-flex flex-row justify-content-center align-items-center\">\r\n    <mat-card>\r\n        <mat-card-title-group>\r\n            <mat-card-title>Crea a tu usuario</mat-card-title>\r\n        </mat-card-title-group>\r\n\r\n        <mat-card-content>\r\n            <form role=\"form\" [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\r\n                <fieldset class=\"d-flex flex-column\">\r\n                    <mat-form-field class=\"w-100\">\r\n                        <mat-label aria-label=\"Nombre\">Nombre</mat-label>\r\n                        <input matInput name=\"firstName\" type=\"text\" formControlName=\"firstName\">\r\n                        <mat-error>Campo requerido</mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field class=\"w-100\">\r\n                        <mat-label aria-label=\"Apellido\">Apellido</mat-label>\r\n                        <input matInput name=\"lastName\" type=\"text\" formControlName=\"lastName\">\r\n                        <mat-error>Campo requerido</mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field class=\"w-100\">\r\n                        <mat-label aria-label=\"Email\">email</mat-label>\r\n                        <input matInput name=\"email\" type=\"text\" formControlName=\"email\">\r\n                        <mat-error>Campo requerido</mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field class=\"w-100\">\r\n                        <mat-label aria-label=\"Contraseña\">Contraseña</mat-label>\r\n                        <input matInput name=\"password\" type=\"text\" formControlName=\"password\">\r\n                        <mat-error>Campo requerido</mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field class=\"w-100\">\r\n                        <mat-label aria-label=\"Roles\">Roles</mat-label>\r\n                        <mat-select formControlName=\"roles\" multiple panelClass=\"cdkSelect\">\r\n                            <mat-option *ngFor=\"let role of (authManagementService.roles$ | async)\" [value]=\"role\">{{role.description}}</mat-option>\r\n                        </mat-select>\r\n                    </mat-form-field>\r\n\r\n                    <button role=\"button\" (click)=\"onSubmit()\" type=\"submit\" mat-raised-button color=\"primary\" class=\"w-100\" [disabled]=\"registerForm.invalid\">Crear</button>\r\n                    <button role=\"button\" mat-raised-button color=\"accent\" class=\"w-100\" routerLink=\"/login\">Iniciar Sesión</button>\r\n                </fieldset>\r\n            </form>\r\n        </mat-card-content>\r\n    </mat-card>\r\n</div>","\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { LoginRoutingModule } from './login-routing.module';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { MaterialModule } from '../../material/material.module';\r\nimport { FaIconLibrary, FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { faMicrosoft } from '@fortawesome/free-brands-svg-icons';\r\nimport { faGoogle } from '@fortawesome/free-brands-svg-icons';\r\n\r\n\r\n@NgModule({\r\n  declarations: [LoginComponent, RegisterComponent],\r\n  imports: [\r\n    CommonModule,\r\n    LoginRoutingModule,\r\n    ReactiveFormsModule,\r\n    MaterialModule,\r\n    FontAwesomeModule\r\n  ],\r\n  exports: [\r\n    FontAwesomeModule\r\n  ]\r\n})\r\nexport class LoginModule {\r\n    constructor(faIconLibrary: FaIconLibrary) {\r\n    faIconLibrary.addIcons(\r\n      faMicrosoft,\r\n      faGoogle\r\n    );\r\n  }\r\n}\r\n"]}